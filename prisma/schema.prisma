// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  phone         String?
  image         String?
  plan          Plan            @default(free)
  customerId    String?         @unique 
  subscription  Subscription?
  accounts      Account[]
  sessions      Session[]
  websites      Website[]
  Authenticator Authenticator[]
  incidents     Incident[]
  notifications Notification[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Plan {
  free
  premium
}

enum SubscriptionPeriod {
  monthly
  yearly
}

model Subscription {
  id     String             @id @default(cuid()) @map("_id")
  userId String             @unique
  plan   Plan
  period SubscriptionPeriod

  startDate DateTime @default(now())
  endDate   DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [id])
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([userId, credentialID])
}

model Website {
  id           Int      @id @default(autoincrement())
  url          String   
  status       Int 
  responseTime Int
  uptime       Int
  ttfb         Float?
  dnsTime      Float?
  sslExpiry     DateTime?
  domainExpiry  DateTime?
  checkInterval String? @default("5")
  error        String?  
  userId       String
  metrics      Metric[]
  incidents    Incident[]
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Metric {
  id Int @id @default(autoincrement())
  websiteId Int
  status Int 
  responseTime Int
  website Website @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Incident {
  id          Int      @id @default(autoincrement())
  websiteId   Int
  description String
  status      String
  userId      String
  website     Website  @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startedAt   DateTime
  resolvedAt  DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id          Int      @id @default(autoincrement())
  userId      String
  message     String
  channels    Channel[]
  read        Boolean  @default(false)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Channel {
  email
  phone_sms
  slack
}